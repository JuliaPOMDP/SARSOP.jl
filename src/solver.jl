"""
    SARSOPSolver

Base solver type for SARSOP. Contains an options dictionary with the following entries:

* 'fast': use fast (but very picky) alternate parser for .pomdp files
* 'randomization': turn on randomization for the sampling algorithm
* 'precision': run ends when target precision is reached
* 'timeout':  [sec] If running time exceeds the specified value, pomdpsol writes out a policy and terminates
* 'memory': [MB] If memory usage exceeds the specified value, pomdpsol writes out a policy and terminates
* 'trial-improvement-factor': temrinates when the gap between bounds reaches this value
* 'policy-interval':  the time interval between two consecutive write-out of policy files
"""
mutable struct SARSOPSolver <: Solver

    options::Dict{AbstractString,Any}

    function SARSOPSolver(;
        fast::Bool=false, # Use fast (but very picky) alternate parser for .pomdp files
        randomization::Bool=false, # run ends when target precision is reached
        precision::Float64=DEFAULT_PRECISION, # Turn on randomization for the sampling algorithm.
        timeout::Float64=NaN, # [sec] If running time exceeds the specified value, pomdpsol writes out a policy and terminates
        memory::Float64=NaN, # [MB] If memory usage exceeds the specified value, pomdpsol writes out a policy and terminates
        trial_improvement_factor::Float64=DEFAULT_TRIAL_IMPROVEMENT_FACTOR,
                    # a trial terminates at a belief when the gap between its upper and lower bound is within
                    # `improvement_constant` of the current precision at the initial belief
        policy_interval::Float64=NaN # the time interval between two consecutive write-out of policy files; defaults to only exporting at end
        )

        options = Dict{AbstractString,Any}()
        if fast
            options["fast"] = ""
        end
        if randomization
            options["randomization"] = ""
        end
        if !isapprox(precision, DEFAULT_PRECISION)
            options["precision"] = precision
        end
        if !isnan(timeout)
            options["timeout"] = timeout
        end
        if !isnan(memory)
            options["memory"] = memory
        end
        if !isapprox(trial_improvement_factor, DEFAULT_TRIAL_IMPROVEMENT_FACTOR)
           options["trial-improvement-factor"] = trial_improvement_factor
        end
        if !isnan(policy_interval)
            options["policy-interval"] = policy_interval
        end

        new(options)
    end
end

"""
    POMDPPolicy

Policy type for POMDPs that contains a reference to the .policy file generated by pomdpsol.
Contains the alpha vectors and the action mapping required to execute a policy.
"""
mutable struct POMDPPolicy <: Policy
    filename::AbstractString
    alphas::Alphas
    pomdp::POMDP
    action_map::Vector{Any}
    POMDPPolicy(filename::AbstractString, alphas::Alphas, pomdp::POMDP) = new(filename, alphas, pomdp, Any[])
    function POMDPPolicy(pomdp::POMDP, filename::AbstractString="out.policy")
        self = new()
        self.filename = filename
        self.pomdp = pomdp
        self.alphas = POMDPAlphas()
        self.action_map = ordered_actions(pomdp)
        return self
    end
end


"""
    solve(solver, pomdp, policy)

Runs pomdpsol using the options in 'solver' on 'pomdp',
and writes out a .policy xml file specified by 'policy'.
"""
function solve(solver::SARSOPSolver, pomdp::POMDP; silent=false, policy_filename::String="policy.out", pomdp_file_name::String="model.pomdpx")
    pomdp_file = POMDPFile(pomdp, pomdp_file_name, silent=silent)
    if isempty(solver.options)
        if silent == true
            success(`$EXEC_POMDP_SOL $(pomdp_file.filename) --output $(policy_filename)`)
        else
            run(`$EXEC_POMDP_SOL $(pomdp_file.filename) --output $(policy_filename)`)
        end
    else
        options_list = _get_options_list(solver.options)
        if silent == true
            success(`$EXEC_POMDP_SOL $(pomdp_file.filename) --output $(policy_filename) $options_list`)
        else
            run(`$EXEC_POMDP_SOL $(pomdp_file.filename) --output $(policy_filename) $options_list`)
        end
    end
    alphas = POMDPAlphas(policy_filename)
    return AlphaVectorPolicy(pomdp, alphas.alpha_vectors, alphas.alpha_actions)
end

solve(solver::SARSOPSolver, mdp::MDP; kwargs...) = mdp_error()

"""
Load a policy from an xml file output by SARSOP.
"""
function load_policy(pomdp::POMDP, file_name::AbstractString)
    alphas = nothing
    if isfile(file_name)
        alphas = POMDPAlphas(file_name)
    else
        error("Policy file ", file_name, " does not exist")
    end
    policy = POMDPPolicy(pomdp, file_name)
    return AlphaVectorPolicy(pomdp, alphas.alpha_vectors, alphas.alpha_actions)
end

mdp_error() = error("SARSOP is designed to solve POMDPs and is not set up to solve MDPs; consider using DiscreteValueIteration.jl to solve MDPs.")
